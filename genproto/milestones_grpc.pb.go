// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: milestones.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MilestoneServiceClient is the client API for MilestoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilestoneServiceClient interface {
	AddMilestone(ctx context.Context, in *AddMilestonesRequest, opts ...grpc.CallOption) (*AddMilestonesResponse, error)
	GetAllMilestone(ctx context.Context, in *GetAllMilestonesRequest, opts ...grpc.CallOption) (*GetAllMilestonesResponse, error)
	UpdateMilestone(ctx context.Context, in *UpdateMilestonesRequest, opts ...grpc.CallOption) (*UpdateMilestonesResponse, error)
	DeleteMilestone(ctx context.Context, in *DeleteMilestonesRequest, opts ...grpc.CallOption) (*DeleteMilestonesResponse, error)
}

type milestoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilestoneServiceClient(cc grpc.ClientConnInterface) MilestoneServiceClient {
	return &milestoneServiceClient{cc}
}

func (c *milestoneServiceClient) AddMilestone(ctx context.Context, in *AddMilestonesRequest, opts ...grpc.CallOption) (*AddMilestonesResponse, error) {
	out := new(AddMilestonesResponse)
	err := c.cc.Invoke(ctx, "/timecapsule.MilestoneService/AddMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneServiceClient) GetAllMilestone(ctx context.Context, in *GetAllMilestonesRequest, opts ...grpc.CallOption) (*GetAllMilestonesResponse, error) {
	out := new(GetAllMilestonesResponse)
	err := c.cc.Invoke(ctx, "/timecapsule.MilestoneService/GetAllMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneServiceClient) UpdateMilestone(ctx context.Context, in *UpdateMilestonesRequest, opts ...grpc.CallOption) (*UpdateMilestonesResponse, error) {
	out := new(UpdateMilestonesResponse)
	err := c.cc.Invoke(ctx, "/timecapsule.MilestoneService/UpdateMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneServiceClient) DeleteMilestone(ctx context.Context, in *DeleteMilestonesRequest, opts ...grpc.CallOption) (*DeleteMilestonesResponse, error) {
	out := new(DeleteMilestonesResponse)
	err := c.cc.Invoke(ctx, "/timecapsule.MilestoneService/DeleteMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilestoneServiceServer is the server API for MilestoneService service.
// All implementations must embed UnimplementedMilestoneServiceServer
// for forward compatibility
type MilestoneServiceServer interface {
	AddMilestone(context.Context, *AddMilestonesRequest) (*AddMilestonesResponse, error)
	GetAllMilestone(context.Context, *GetAllMilestonesRequest) (*GetAllMilestonesResponse, error)
	UpdateMilestone(context.Context, *UpdateMilestonesRequest) (*UpdateMilestonesResponse, error)
	DeleteMilestone(context.Context, *DeleteMilestonesRequest) (*DeleteMilestonesResponse, error)
	mustEmbedUnimplementedMilestoneServiceServer()
}

// UnimplementedMilestoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMilestoneServiceServer struct {
}

func (UnimplementedMilestoneServiceServer) AddMilestone(context.Context, *AddMilestonesRequest) (*AddMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMilestone not implemented")
}
func (UnimplementedMilestoneServiceServer) GetAllMilestone(context.Context, *GetAllMilestonesRequest) (*GetAllMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMilestone not implemented")
}
func (UnimplementedMilestoneServiceServer) UpdateMilestone(context.Context, *UpdateMilestonesRequest) (*UpdateMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestone not implemented")
}
func (UnimplementedMilestoneServiceServer) DeleteMilestone(context.Context, *DeleteMilestonesRequest) (*DeleteMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMilestone not implemented")
}
func (UnimplementedMilestoneServiceServer) mustEmbedUnimplementedMilestoneServiceServer() {}

// UnsafeMilestoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilestoneServiceServer will
// result in compilation errors.
type UnsafeMilestoneServiceServer interface {
	mustEmbedUnimplementedMilestoneServiceServer()
}

func RegisterMilestoneServiceServer(s grpc.ServiceRegistrar, srv MilestoneServiceServer) {
	s.RegisterService(&MilestoneService_ServiceDesc, srv)
}

func _MilestoneService_AddMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).AddMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timecapsule.MilestoneService/AddMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).AddMilestone(ctx, req.(*AddMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneService_GetAllMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).GetAllMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timecapsule.MilestoneService/GetAllMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).GetAllMilestone(ctx, req.(*GetAllMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneService_UpdateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).UpdateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timecapsule.MilestoneService/UpdateMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).UpdateMilestone(ctx, req.(*UpdateMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneService_DeleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).DeleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timecapsule.MilestoneService/DeleteMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).DeleteMilestone(ctx, req.(*DeleteMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilestoneService_ServiceDesc is the grpc.ServiceDesc for MilestoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilestoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timecapsule.MilestoneService",
	HandlerType: (*MilestoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMilestone",
			Handler:    _MilestoneService_AddMilestone_Handler,
		},
		{
			MethodName: "GetAllMilestone",
			Handler:    _MilestoneService_GetAllMilestone_Handler,
		},
		{
			MethodName: "UpdateMilestone",
			Handler:    _MilestoneService_UpdateMilestone_Handler,
		},
		{
			MethodName: "DeleteMilestone",
			Handler:    _MilestoneService_DeleteMilestone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milestones.proto",
}
